import numpy as np
import matplotlib.pyplot as plt

# color - "blackness" of pixel p (0 - 255)
# img_pix - number of imges in dataset with pixel p non-0
# img_total - total number of imges in dataset
def tfidf(color,img_pix,img_total):
	if img_pix==0:
		return 0
	else:
		return color * np.log(img_total/img_pix)

with open("C:/Users/kao/Google Drive/Desktop/website/digit/train.csv","r",encoding="utf-8") as f:
	header = f.readline()
	rawdata = [row.split(',') for row in f.read().splitlines()]

img_total = len(rawdata)

# prepare img_pix values
labels = [int(row.pop(0)) for row in rawdata]
data_matrix = np.array(rawdata,dtype=int)

# only interested in zero/non-zero distinction
bool_matrix = data_matrix.astype(bool)
img_pix_vec=bool_matrix.T.sum(1)

result = np.array([])
for img_vec in data_matrix:
	double_vec = zip(img_vec,img_pix_vec)
	result_row = np.array([tfidf(x[0],x[1],img_total) for x in double_vec])
	try:
		result = np.vstack((result,result_row))
	# first row will throw a ValueError since vstack accepts rows of same len
	except ValueError:
		result = result_row

#tfidf_img = result[0].reshape(28,28)
#plt.imshow(tfidf_img,interpolation="nearest")